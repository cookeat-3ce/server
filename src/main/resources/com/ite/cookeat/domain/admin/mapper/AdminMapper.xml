<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ite.cookeat.domain.admin.mapper.AdminMapper">

  <insert id="insertEvent" parameterType="PostEventReq">
    <selectKey keyProperty="eventId" order="BEFORE" resultType="Integer">
      SELECT event_seq.nextval AS eventId FROM dual
    </selectKey>
    INSERT INTO event (event_id, title, content, startdate, enddate, thumbnail, regdate)
    VALUES (#{eventId}, #{title}, #{content}, #{startdate, jdbcType=TIMESTAMP},
    #{enddate, jdbcType=TIMESTAMP},
    UTL_RAW.CAST_TO_RAW(#{thumbnail}), CURRENT_TIMESTAMP)
  </insert>

  <select id="selectVerifyRequestCount" resultType="Integer">
    SELECT COUNT(m.member_id)
    FROM member m
    WHERE m.status = 'ACTIVE'
      AND m.deletedate IS NULL
      AND m.verified_status = 'REQUEST_VERIFY'
  </select>

  <select id="selectVerifyRequestList" parameterType="Criteria"
    resultType="GetVerifyRequestRes">
    SELECT m.member_id         AS memberId,
           m.username          AS username,
           m.sskcook_count     AS sskcookCount,
           COUNT(m2.member_id) AS followerCount
    FROM member m
           LEFT OUTER JOIN subscription s ON m.member_id = s.following_id
           LEFT OUTER JOIN member m2 ON s.follower_id = m2.member_id
      AND m2.status = 'ACTIVE'
      AND m2.deletedate IS NULL
    WHERE m.status = 'ACTIVE'
      AND m.deletedate IS NULL
      AND m.verified_status = 'REQUEST_VERIFY'
    GROUP BY m.member_id, m.username, m.sskcook_count
    ORDER BY followerCount DESC, sskcookCount DESC
    OFFSET (#{pageNum} - 1) * #{pageSize} ROWS FETCH NEXT #{pageSize} ROWS ONLY
  </select>

  <select id="selectVerifyRequestCount" resultType="Integer">
    SELECT COUNT(m.member_id)
    FROM member m
    WHERE m.status = 'ACTIVE'
      AND m.deletedate IS NULL
      AND m.verified_status = 'REQUEST_VERIFY'
  </select>

  <select id="selectReportSskcookList" parameterType="Criteria" resultType="GetReportSskcookRes">
    SELECT s.sskcook_id       AS sskcookId,
           s.title            AS title,
           COUNT(r.report_id) AS reportCount
    FROM sskcook s
           INNER JOIN report r ON s.sskcook_id = r.sskcook_id
    WHERE s.deletedate IS NULL
    GROUP BY s.sskcook_id, s.title
    ORDER BY reportCount DESC, s.sskcook_id DESC
    OFFSET (#{pageNum} - 1) * #{pageSize} ROWS FETCH NEXT #{pageSize} ROWS ONLY
  </select>

  <select id="selectReportSskcookCount">
    SELECT COUNT(DISTINCT s.sskcook_id) AS totalCount
    FROM report r
           INNER JOIN sskcook s ON r.sskcook_id = s.sskcook_id
    WHERE s.deletedate IS NULL
  </select>

  <update id="updateVerifyRequestMemberStatus" parameterType="Map">
    UPDATE member
    SET verified_status = #{verifiedStatus}
    WHERE username = #{username}
  </update>

  <update id="updateReportSskcookStatus" parameterType="DeleteReportSskcookReq"
    statementType="CALLABLE">
    CALL update_and_delete_report_sskcook(#{sskcookId, mode=IN, jdbcType=INTEGER},
      #{result, mode=OUT, jdbcType=INTEGER})
  </update>
</mapper>