<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    파일명 : MemberMapper.xml
    설  명 : 멤버 페이지
    == 개정이력 ========================================
    수정일         수정자     수정내용
    ==========   =======   ================================
    2024.08.21   양재혁      최초 생성
    2024.08.21   양재혁      회원 가입
    2024.08.21   양재혁      로그인
    2024.08.22   양재혁      멤버 정보 조회
    2024.08.23   양재혁      멤버 검색
    2024.08.23   김지수      공지 목록 조회
    2024.08.24   김지수      한줄 소개 등록
    2024.08.25   양재혁      구독 멤버 조회
    2024.08.27   김지수      사용자 구독
    2024.08.29   김지수      구독 목록, 취소 stored procedure 적용
-->
<mapper namespace="com.ite.cookeat.domain.member.mapper.MemberMapper">

  <insert id="insertMember" keyProperty="memberId" parameterType="Member">
    <![CDATA[
    INSERT INTO member(member_id, username, password, nickname, profile_img, regdate, status,
                       subscription_count, sskcook_count, verified_status, roles, one_liner)
    VALUES (member_seq.nextval, #{username}, #{password}, #{nickname},
            UTL_RAW.CAST_TO_RAW(#{profileImage}), CURRENT_TIMESTAMP, 'ACTIVE', 0, 0, 'UNVERIFIED',
            'ROLE_USER', null)
    ]]>
    </insert>

  <insert id="insertSubscription" parameterType="PostSubscriptionReq" statementType="CALLABLE">
    CALL PROC_INSERT_SUBSCRIPTION(#{followerUsername, mode=IN, jdbcType=VARCHAR}, #{followingUsername, mode=IN, jdbcType=VARCHAR}, #{result, mode=OUT, jdbcType=INTEGER})
  </insert>

  <resultMap id="subscriptionsResultMap" type="GetSubscriptionMemberDetailsRes">
    <result column="username" property="username"/>
    <result column="nickname" property="nickname"/>
    <result column="profileImage" property="profileImage"/>
  </resultMap>

  <select id="selectNullUserDetails" parameterType="GetUserDetailsReq" statementType="CALLABLE">
    CALL PROC_GET_NULL_USER_DETAILS( #{followingname, mode=IN, jdbcType=VARCHAR},
      #{username, mode=OUT, jdbcType=VARCHAR},
      #{nickname, mode=OUT, jdbcType=VARCHAR},
      #{profileImage, mode=OUT, jdbcType=VARCHAR},
      #{oneLiner, mode=OUT, jdbcType=VARCHAR},
      #{subscriptionCount, mode=OUT, jdbcType=INTEGER},
      #{sskcookCount, mode=OUT, jdbcType=INTEGER},
      #{followStatus, mode=OUT, jdbcType=VARCHAR}
      )
  </select>

  <select id="selectUserDetails" parameterType="GetUserDetailsReq" statementType="CALLABLE">
    CALL PROC_GET_USER_DETAILS( #{followingname, mode=IN, jdbcType=VARCHAR},
      #{followername, mode=IN, jdbcType=VARCHAR},
      #{username, mode=OUT, jdbcType=VARCHAR},
      #{nickname, mode=OUT, jdbcType=VARCHAR},
      #{profileImage, mode=OUT, jdbcType=VARCHAR},
      #{oneLiner, mode=OUT, jdbcType=VARCHAR},
      #{subscriptionCount, mode=OUT, jdbcType=INTEGER},
      #{sskcookCount, mode=OUT, jdbcType=INTEGER},
      #{followStatus, mode=OUT, jdbcType=VARCHAR}
      )
  </select>


  <select id="selectDuplicatedUsername" parameterType="String" resultType="Integer">
        <![CDATA[
    SELECT COUNT(username)
    FROM member
    WHERE username = #{username}
      AND deletedate IS NULL
    ]]>
    </select>

  <select id="selectMemberNotices" parameterType="Map" resultType="GetMemberNoticeRes">
    <![CDATA[
    SELECT n.notice_id AS noticeId, n.title, n.content
    FROM member m
           INNER JOIN notice n ON m.member_id = n.member_id
    WHERE m.username = #{username}
      AND n.deletedate IS NULL
    ORDER BY n.regdate DESC
    OFFSET (#{cri.pageNum} - 1) * #{cri.pageSize} ROWS FETCH NEXT #{cri.pageSize} ROWS ONLY
    ]]>
  </select>

  <select id="selectMemberNoticeCount" parameterType="String" resultType="Integer">
    <![CDATA[
    SELECT COUNT(notice_id)
    FROM member m
           INNER JOIN notice n ON m.member_id = n.member_id
    WHERE username = #{username}
      AND n.deletedate IS NULL
    ]]>
  </select>

  <select id="selectMemberId" parameterType="String" resultType="Integer">
    <![CDATA[
    SELECT member_id
    FROM member
    WHERE username = #{username}
      AND status = 'ACTIVE'
    ]]>
  </select>

  <select id="selectSearchMember" parameterType="Map"
    resultType="GetUserDetailsRes">
    <![CDATA[
    SELECT username,
           nickname,
           TO_CHAR(profile_img) as profileImage,
           subscription_count   as subscriptionCount,
           sskcook_count        as sskcookCount
    FROM member
    WHERE LOWER(nickname) LIKE '%' || LOWER(#{keyword}) || '%'
      AND status = 'ACTIVE'
    ORDER BY subscription_count DESC, sskcook_count DESC, regdate DESC
    OFFSET (#{cri.pageNum} - 1) * #{cri.pageSize} ROWS FETCH NEXT #{cri.pageSize} ROWS ONLY
    ]]>
  </select>

  <select id="selectSearchMemberCount" parameterType="String" resultType="Integer">
    SELECT COUNT(nickname)
    FROM member
    WHERE LOWER(nickname) LIKE '%' || LOWER(#{keyword}) || '%'
      AND status = 'ACTIVE'
  </select>

  <select id="selectMemberSubscriptionList" parameterType="GetSubscriptionMemberReq"
    statementType="CALLABLE">
    CALL PROC_GET_MEMBER_SUBSCRIPTION_LIST( #{username, mode=IN, jdbcType=VARCHAR},
      #{cri.pageNum, mode=IN, jdbcType=INTEGER},
      #{cri.pageSize, mode=IN, jdbcType=INTEGER},
      #{total, mode=OUT, jdbcType=INTEGER},
      #{subscriptionList, mode=OUT, jdbcType=CURSOR, resultMap=subscriptionsResultMap}
      )
  </select>

  <select id="selectMemberVerifiedStatus" parameterType="String">
    SELECT verified_status
    FROM member
    WHERE username = #{username}
      AND status = 'ACTIVE'
      AND deletedate IS NULL
  </select>

  <select id="selectUsername" parameterType="String"
    resultType="Member">
    <![CDATA[
    SELECT member_id as         memberId,
           username,
           password,
           roles,
           TO_CHAR(profile_img) profileImage,
           nickname
    FROM member
    WHERE username = #{username}
      AND deletedate IS NULL
    ]]>
	</select>

  <update id="updateMemberOneLiner" parameterType="PostMemberOneLinerReq">
  <![CDATA[
    UPDATE member
    SET one_liner = #{oneLiner}
    WHERE username = #{username}
    ]]>
  </update>

  <update id="updateMemberDeletedate" parameterType="String">
    <![CDATA[
    UPDATE member
    SET deletedate = CURRENT_TIMESTAMP,
        status     = 'INACTIVE'
    ]]>
  </update>
  <update id="updateVerifiedStatus">
    <![CDATA[
    UPDATE member
    SET verified_status = #{status}
    WHERE username = #{username}
    ]]>
  </update>
</mapper>