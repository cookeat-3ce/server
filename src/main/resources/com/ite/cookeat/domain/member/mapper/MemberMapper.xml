<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ite.cookeat.domain.member.mapper.MemberMapper">

  <insert id="insertMember" keyProperty="memberId" parameterType="Member">
    <![CDATA[
    INSERT INTO member(member_id, username, password, nickname, profile_img, regdate, status,
                       subscription_count, sskcook_count, verified_status, roles, one_liner)
    VALUES (member_seq.nextval, #{username}, #{password}, #{nickname},
            UTL_RAW.CAST_TO_RAW(#{profileImage}), CURRENT_TIMESTAMP, 'ACTIVE', 0, 0, 'UNVERIFIED',
            'ROLE_USER', null)
    ]]>
    </insert>

  <insert id="insertSubscription" parameterType="PostSubscriptionReq">
    <selectKey keyProperty="subscriptionId" order="BEFORE" resultType="Integer">
      <![CDATA[
      SELECT subscription_seq.nextval AS subscriptionId FROM dual
      ]]>
    </selectKey>
    <![CDATA[
    INSERT INTO subscription (subscription_id, follower_id, following_id)
    SELECT #{subscriptionId}, m1.member_id AS follower_id, m2.member_id AS following_id
    FROM member m1
    JOIN member m2 ON m2.username = #{followingUsername} AND m2.status = 'ACTIVE' AND m2.DELETEDATE IS NULL
    WHERE m1.username = #{followerUsername}
      AND m1.status = 'ACTIVE'
      AND m1.DELETEDATE IS NULL
      AND NOT EXISTS (
        SELECT 1
        FROM subscription s
        WHERE s.follower_id = m1.member_id
          AND s.following_id = m2.member_id
      )
    ]]>
  </insert>

  <select id="selectUserDetails" parameterType="String" resultType="GetUserDetailsRes">
        <![CDATA[
    SELECT nickname,
           TO_CHAR(profile_img) as profileImage,
           one_liner            AS oneLiner,
           subscription_count   as subscriptionCount,
           sskcook_count        as sskcookCount
    FROM member
    WHERE username = #{username}
      AND status = 'ACTIVE'
    ]]>
    </select>

  <select id="selectDuplicatedUsername" parameterType="String" resultType="Integer">
        <![CDATA[
    SELECT COUNT(username)
    FROM member
    WHERE username = #{username}
      AND deletedate IS NULL
    ]]>
    </select>

  <select id="selectMemberNotices" parameterType="Map" resultType="GetMemberNoticeRes">
    <![CDATA[
    SELECT n.notice_id AS noticeId, n.title, n.content
    FROM member m
           INNER JOIN notice n ON m.member_id = n.member_id
    WHERE m.username = #{username}
      AND n.deletedate IS NULL
    ORDER BY n.regdate DESC
    OFFSET (#{cri.pageNum} - 1) * #{cri.pageSize} ROWS FETCH NEXT #{cri.pageSize} ROWS ONLY
    ]]>
  </select>

  <select id="selectMemberNoticeCount" parameterType="String" resultType="Integer">
    <![CDATA[
    SELECT COUNT(notice_id)
    FROM member m
           INNER JOIN notice n ON m.member_id = n.member_id
    WHERE username = #{username}
      AND n.deletedate IS NULL
    ]]>
  </select>

  <select id="selectMemberId" parameterType="String" resultType="Integer">
    <![CDATA[
    SELECT member_id
    FROM member
    WHERE username = #{username}
      AND status = 'ACTIVE'
    ]]>
  </select>

  <select id="selectSearchMember" parameterType="Map"
    resultType="GetUserDetailsRes">
    <![CDATA[
    SELECT username,
           nickname,
           TO_CHAR(profile_img) as profileImage,
           subscription_count   as subscriptionCount,
           sskcook_count        as sskcookCount
    FROM member
    WHERE LOWER(nickname) LIKE '%' || LOWER(#{keyword}) || '%'
      AND status = 'ACTIVE'
    ORDER BY subscription_count DESC, sskcook_count DESC, regdate DESC
    OFFSET (#{cri.pageNum} - 1) * #{cri.pageSize} ROWS FETCH NEXT #{cri.pageSize} ROWS ONLY
    ]]>
  </select>

  <select id="selectSearchMemberCount" parameterType="String" resultType="Integer">
    SELECT COUNT(nickname)
    FROM member
    WHERE LOWER(nickname) LIKE '%' || LOWER(#{keyword}) || '%'
      AND status = 'ACTIVE'
  </select>

  <select id="selectMemberSubscriptionList" parameterType="Map"
    resultType="GetSubscriptionUserDetailsRes">
    <![CDATA[
    SELECT d.username, TO_CHAR(d.profile_img) as profileImage
    FROM member b
           INNER JOIN subscription c ON b.member_id = c.follower_id
           INNER JOIN member d ON d.member_id = c.following_id
    WHERE b.username = #{username}
      AND b.status = 'ACTIVE'
      AND d.status = 'ACTIVE'
    OFFSET(#{cri.pageNum} - 1) * #{cri.pageSize} ROWS FETCH NEXT #{cri.pageSize} ROWS ONLY
    ]]>
  </select>

  <select id="selectMemberSubscriptionListCount" parameterType="String" resultType="Integer">
    <![CDATA[
    SELECT COUNT(d.username)
    FROM member b
           INNER JOIN subscription c ON b.member_id = c.follower_id
           INNER JOIN member d ON d.member_id = c.following_id
    WHERE b.username = #{username}
      AND b.status = 'ACTIVE'
      AND d.status = 'ACTIVE'
    ]]>
  </select>

  <select id="selectMemberVerifiedStatus" parameterType="String">
    SELECT verified_status
    FROM member
    WHERE username = #{username}
      AND status = 'ACTIVE'
      AND deletedate IS NULL
  </select>

  <select id="selectUsername" parameterType="String"
    resultType="Member">
    <![CDATA[
    SELECT member_id as         memberId,
           username,
           password,
           roles,
           TO_CHAR(profile_img) profileImage,
           nickname
    FROM member
    WHERE username = #{username}
      AND deletedate IS NULL
    ]]>
	</select>

  <update id="updateMemberOneLiner" parameterType="PostMemberOneLinerReq">
  <![CDATA[
    UPDATE member
    SET one_liner = #{oneLiner}
    WHERE username = #{username}
    ]]>
  </update>

  <update id="updateMemberDeletedate" parameterType="String">
    <![CDATA[
    UPDATE member
    SET deletedate = CURRENT_TIMESTAMP,
        status     = 'INACTIVE'
    ]]>
  </update>
  <update id="updateVerifiedStatus">
    <![CDATA[
    UPDATE member
    SET verified_status = #{status}
    WHERE username = #{username}
    ]]>
  </update>
</mapper>